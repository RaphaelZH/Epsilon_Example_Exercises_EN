<?xml version="1.0" encoding="UTF-8"?>
<!--
	* The following build script illustrates how to launch the example via Ant.
	* Ensure that the External Tools Configuration specifies that the JRE to be used is the same as 
	the workspace.
		1) Click External Tools Configuration... from the External Tools dropdown.
		2) Select the Ant build for this build script.
		3) Click the JRE tab.
		4) Select the option that reads: "Run in the same JRE as the workspace."
		5) Click Apply.
		6) Click Run.
    ================================================================================================
	* In terms of concrete syntax, Ant provides an XML-based syntax.
	* In Ant, each workflow is captured as a project.
	* Each Ant project consists of a number of targets.
	* The following exemplar Ant project illustrates that it contains one target (main), which is 
	also set to be the default target.
-->
<project name="01. Create an OO model with EOL" default="main" basedir=".">
	<property name="ant.file" value="${basedir}/launch.xml"/>
	<property name="ant.project.name" value="01. Create an OO model with EOL"/>
	<property name="ant.project.default.target" value="main"/>
	<property name="ant.project.description" 
		value="In this example, we use EOL to programmatically modify a model that conforms to a 
		Tree metamodel and store the modified version as a new model."/>
	<!--
		* The one specified as the default is executed automatically when the project is executed.
		* Each target contains a number of tasks and depends on other targets that must be executed 
		before it.
		* An Ant task is responsible for a distinct activity and can either succeed or fail.
	-->
	<target name="main" depends="loadModels">
		<!-- The epsilon.eol task executes an EOL module, defined using the src attribute on the 
		models that are specified using the model nested elements. -->
		<epsilon.eol src="Add_Leaves.eol">
			<!-- Model references (using the <model> nested element) inherited from the Epsilon 
			abstract executable module task allow model management tasks to refer by name to models 
			previously loaded in the Ant buildfile. -->

			
			<model ref="OO"/>
		</epsilon.eol>
	</target>
	<target name="loadModels">



		<!-- Register the file OO.ecore, stored in one of the sibling folders, as the Ecore 
		metamodel used in this example. -->



		<epsilon.emf.register file="../00. Ecore metamodels/OO.ecore"/>
		<!--
			* The LoadModelTask (epsilon.loadModel) loads a model from an arbitrary location (e.g., 
			filesystem, database) and adds it to the project repository so that subsequent Epsilon 
			tasks can query or modify it.
			* The name attribute, one of three generic attributes the LoadModelTask defines, 
			specifies the name of the model in the project repository.
		-->
		<epsilon.emf.loadModel name="OO" modelFile="models/OO_Instance.model" metamodelUri="OO" 
			read="false" store="true"/>
	</target>
</project>