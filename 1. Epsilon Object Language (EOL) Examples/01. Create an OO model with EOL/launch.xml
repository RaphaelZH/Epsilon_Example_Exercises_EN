<?xml version="1.0" encoding="UTF-8"?>
<!--
	* The provided build script demonstrates how to launch the example using ANT.
	* Before proceeding, ensure that the External Tools Configuration specifies the JRE to be used as 
	the same as the workspace.
	* Here’s a step-by-step guide:
		1. Click on the External Tools dropdown menu and select "External Tools Configuration…".
		2. From the list of available options, select the ANT build for this build script.
		3. Navigate to the JRE tab.
		4. In the JRE tab, select the option that reads: "Run in the same JRE as the workspace."
		5. Click the "Apply" button to save the changes.
		6. Finally, click the "Run" button to launch the example.
	================================================================================================
	* In ANT, each workflow is encapsulated as a project.
	* Each ANT project comprises a collection of targets.
	* The default target is automatically executed when the project is executed.
	* Each target consists of a sequence of tasks and relies on other targets that must be executed 
	before it.
	* An ANT task is responsible for a specific activity and can either succeed or fail.
	* Examples of activities implemented by ANT tasks include file system management, compiler 
	invocation, version management, and remote artifact deployment.
    ================================================================================================
	* In terms of concrete syntax, ANT employs an XML-based syntax.
	* The following ANT project serves as an example, showcasing a single target (the "main" target) 
	that is also designated as the default target.
-->
<project name="Build_OO_Instance" default="main" basedir=".">
	<property name="ant.file" value="${basedir}/launch.xml"/>
	<property name="ant.project.name" value="Build_OO_Instance"/>
	<property name="ant.project.default.target" value="main"/>
	<property name="ant.project.default.target.description" 
		value="Build an object-oriented instance model."/>
	<property name="ant.project.description" 
		value="This project uses the Epsilon Object Language (EOL) to build an object-oriented 
			instance model."/>
	<!--
	-->
	<target name="loadModels">
		<!-- Register `OO.ecore` as the Ecore metamodel used in this example. -->
		<epsilon.emf.register file="../00. Ecore metamodels/OO.ecore"/>
		<epsilon.emf.loadModel name="OO" modelFile="models/OO_Instance.model" metamodelUri="OO" 
			read="false" store="true"/>
	</target>
	<target name="main" depends="loadModels">
		<epsilon.eol src="Build_OO_Instance.eol">
			<model ref="OO"/>
		</epsilon.eol>
	</target>
</project>