pre {
	
	"Running ETLâ€¦\n".println();
	var database : new DB!Database;
	
}

rule Class_to_Table
	transform class : OO!Class
	to table : DB!Table {
	
	var column : new DB!Column;
	column.database = database;
	column.table = table;
	column.name = class.name.toLowerCase() + "_id";
	column.type = "Integer";
	table.columns.add(column);
	
	table.database = database;
	table.name = class.name;
	table.primaryKeys.add(column);
	
	for (f in class.features) {
		
		class.name.println("======     ");
		f.println("-----   ");
	
		if (f.type().name = "Attribute") {
						
			var column : new DB!Column;
			column.database = database;
			column.table = table;
			column.name = f.name;
			column.type = f.type.name;
		
			f.type.println("???");
			
			table.columns.add(column);
			
		}
		
		else if (f.type().name = "Reference") {
			
			var column : new DB!Column;
			column.database = database;
			column.table = table;
			column.name = f.name.toLowerCase() + "_id (ForeignKey)";	
			column.type = f.type().name;
			f.type.println("??   ?");
			table.columns.add(column);
			
			
			var foreignkey : new DB!ForeignKey;
			
			class.`extends`.println("///");
			
			foreignkey.parent.type().println();
			
			foreignkey.name = f.name;
			foreignkey.isMany = f.isMany;
			
			//foreignkey.child = f;

			//table.primaryKeys.add(foreignkey);
			//f.owner.println();
			
			foreignkey.type().println("=.=");
			
			table.columns.type().println();
			
		}
		
	}
	
}


